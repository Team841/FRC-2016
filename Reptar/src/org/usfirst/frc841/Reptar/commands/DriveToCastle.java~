// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc841.Reptar.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc841.Reptar.Robot;

/**
 * This Command drives to Castle
 */
public class DriveToCastle extends Command {

	private double speed = 0.3;
	private boolean isForward;
	private double Kp = 0.01;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private double m_distance;
	private double m_center;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveToCastle(double distance, double center) {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		m_distance = distance;
		m_center = center;

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		Robot.drivetrain.initEncoder();
		Robot.drivetrain.SetLowGear();
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {

		double left, right, errorsum;

		// sample distance traveled
		left = Robot.drivetrain.getLeftEncoderDistance();
		right = Robot.drivetrain.getRightEncoderDistance();

		// P control loop to keep right side the same as left side; therefore,
		// making the robot go straight.
		errorsum = (left - right) * this.Kp;

		// limit correction for protection
		if (errorsum > 0.1) {
			errorsum = 0.1;
		} else if (errorsum < -0.1) {
			errorsum = -0.1;
		}

		// Update speed
		if (this.isForward) {
			Robot.drivetrain.SetLeftRight(-this.speed, this.speed + errorsum);
		} else {
			Robot.drivetrain.SetLeftRight(this.speed, -this.speed + errorsum);
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return Math.abs(Robot.drivetrain.getDistance()) < this.m_distance;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.SetLeftRight(0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
