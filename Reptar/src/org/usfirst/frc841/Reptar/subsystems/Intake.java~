// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc841.Reptar.subsystems;

import org.usfirst.frc841.Reptar.RobotMap;
import org.usfirst.frc841.Reptar.commands.*;
import org.usfirst.frc841.lib.PID.PIDControlLoop;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Encoder;

/**
 * This defines the intakes subsystem class
 */
public class Intake extends Subsystem {

	public Shooter.LowerCLoop lowercloop;
	private double DistancePerPulse = 0.351563;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DigitalInput elbowZeroSensor = RobotMap.intakeElbowZeroSensor;
    private final Encoder quadrature = RobotMap.intakeQuadrature;
    private final SpeedController elbowMotor = RobotMap.intakeElbowMotor;
    private final SpeedController rollerMotor = RobotMap.intakeRollerMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public Intake.IntakeCLoop intakecloop;

	double x[] = { 1, 2, 3 };
	double y[] = { 0, 0, 0 };
	private double period = .2;

	public Intake() {
		initSensor();
		intakecloop = new Intake.IntakeCLoop(this, x, y, (long) Math.abs(period * 100));
		intakecloop.SetOutputLimits(-1, 1);
		intakecloop.setTunings(0.05, 0.0001, 0.002); // P, I, D
		intakecloop.updateSetpoint(16.25);
	}

	/**
	 * This sets the speed of the elbowMotor
	 * 
	 * @param speed
	 */
	public void setElbowMotorSpeed(double speed) {
		elbowMotor.set(speed);
	}

	/**
	 * This sets the roller motor to take in the ball
	 */
	public void intakeBall() {
		rollerMotor.set(-1);
	}

	/**
	 * This sets the roller motor to expel the ball
	 */
	public void expelBall() {
		rollerMotor.set(1);
	}

	/**
	 * This stops the roller motor
	 */
	public void stopIntake() {
		rollerMotor.set(0);
	}

	/**
	 * This returns the current angle of the elbow
	 * 
	 * @return Angle
	 */
	public double getCurrentAngle() {
		if (getResetSensor()) {
			quadrature.reset();
		}
		return quadrature.getDistance();
	}

	/**
	 * Initialize the elbow quad sensor
	 */
	public void initSensor() {
		quadrature.setReverseDirection(false);
		quadrature.setDistancePerPulse(DistancePerPulse);
		quadrature.reset();
	}

	/**
	 * Gets the state of the zero point.
	 * 
	 * @return Zero point
	 */
	public boolean getResetSensor() {
		return !elbowZeroSensor.get();
	}

	/**
	 * This Class links the Intakes Control loop to the subsystem
	 *
	 */
	public class IntakeCLoop extends PIDControlLoop {
		Intake subsystem;

		public IntakeCLoop(Intake subsystem, double[] X, double[] Y, long SampleTime) {
			super(X, Y, SampleTime);
			this.subsystem = subsystem;
			// TODO Auto-generated constructor stub
		}

		@Override
		public void setOutput(double value) {
			subsystem.setElbowMotorSpeed(value);
			;
			// System.out.println("Output: " + value);
		}

		@Override
		public double getSensorReading() {
			// System.out.println("in: " + subsystem.getUpperWheelSpeed());
			return subsystem.getCurrentAngle();
		}
		@Override
		public void update() {
			SmartDashboard.putString("DB/String 2",
					"Angle: " + Math.floor(this.subsystem.getCurrentAngle() * 100 / 100.0));
			//SmartDashboard.putNumber ("Angle",this.subsystem.getCurrentAngle ());
		}
	}

}
