// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Reptar;

import org.usfirst.frc841.Reptar.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton onquickturn;
    public JoystickButton highGear;
    public JoystickButton lowGear;
    public JoystickButton stopquickturn;
    public JoystickButton autoaim;
    public Joystick driver;
    public JoystickButton extendHookBtn;
    public JoystickButton spit;
    public JoystickButton suckItIn;
    public JoystickButton stocksucking;
    public JoystickButton intakeOutOfWay;
    public JoystickButton intakeBallPosition;
    public JoystickButton shoot;
    public JoystickButton engageClimbBtn;
    public JoystickButton intakeFloor;
    public Joystick coDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        coDriver = new Joystick(1);
        
        intakeFloor = new JoystickButton(coDriver, 1);
        intakeFloor.whileHeld(new SetIntakeAngle(-125));
        engageClimbBtn = new JoystickButton(coDriver, 7);
        engageClimbBtn.whileHeld(new DriveTrainClimbEngage());
        shoot = new JoystickButton(coDriver, 12);
        shoot.whenPressed(new FireSequence());
        intakeBallPosition = new JoystickButton(coDriver, 3);
        intakeBallPosition.whileHeld(new SetIntakeAngle(-110));
        intakeOutOfWay = new JoystickButton(coDriver, 4);
        intakeOutOfWay.whileHeld(new SetIntakeAngle(0));
        stocksucking = new JoystickButton(coDriver, 8);
        stocksucking.whenPressed(new StopSucking());
        suckItIn = new JoystickButton(coDriver, 6);
        suckItIn.whenPressed(new SuckInBall());
        spit = new JoystickButton(coDriver, 5);
        spit.whenPressed(new SpitOut());
        extendHookBtn = new JoystickButton(coDriver, 5);
        extendHookBtn.whenPressed(new extendHook());
        driver = new Joystick(0);
        
        autoaim = new JoystickButton(driver, 12);
        autoaim.whenPressed(new AutoCenter());
        stopquickturn = new JoystickButton(driver, 6);
        stopquickturn.whenReleased(new stopQuickTurn());
        lowGear = new JoystickButton(driver, 2);
        lowGear.whileHeld(new setLowGear());
        highGear = new JoystickButton(driver, 4);
        highGear.whileHeld(new setHighGear());
        onquickturn = new JoystickButton(driver, 6);
        onquickturn.whenPressed(new Quickturn());


        // SmartDashboard Buttons
        SmartDashboard.putData("SetShooterWheelsSpeeds: Stop", new SetShooterWheelsSpeeds(0, 0));
        SmartDashboard.putData("SetShooterWheelsSpeeds: SuckIn", new SetShooterWheelsSpeeds(-0.25, 0.25));
        SmartDashboard.putData("SetShooterWheelsSpeeds: Hold", new SetShooterWheelsSpeeds(-0.25, -1));
        SmartDashboard.putData("SetShooterWheelsSpeeds: Release", new SetShooterWheelsSpeeds(0, -1));
        SmartDashboard.putData("SpitOut", new SpitOut());
        SmartDashboard.putData("Auto", new Auto());
        SmartDashboard.putData("StopSucking", new StopSucking());
        SmartDashboard.putData("SuckInBall", new SuckInBall());
        SmartDashboard.putData("IntakeRollerOff", new IntakeRollerOff());
        SmartDashboard.putData("FireSequence", new FireSequence());
        SmartDashboard.putData("DrivetoDistance: Over", new DrivetoDistance(15));
        SmartDashboard.putData("ClimbUp", new ClimbUp());
        SmartDashboard.putData("retractHook", new retractHook());
        SmartDashboard.putData("extendHook", new extendHook());
        SmartDashboard.putData("HopperPostion: Lift", new HopperPostion(true));
        SmartDashboard.putData("HopperPostion: Intake", new HopperPostion(false));
        SmartDashboard.putData("Actuate Shooter: ShootPosition", new ActuateShooter(true));
        SmartDashboard.putData("Actuate Shooter: RetractPosition", new ActuateShooter(false));
        SmartDashboard.putData("SetShooterSpeeds: ShootClose", new SetShooterSpeeds(62, 25));
        SmartDashboard.putData("SetShooterSpeeds: stop", new SetShooterSpeeds(0, 0));
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("Quickturn", new Quickturn());
        SmartDashboard.putData("setHighGear", new setHighGear());
        SmartDashboard.putData("setLowGear", new setLowGear());
        SmartDashboard.putData("stopQuickTurn", new stopQuickTurn());
        SmartDashboard.putData("FollowTrajectory", new FollowTrajectory());
        SmartDashboard.putData("AutoCenter", new AutoCenter());
        SmartDashboard.putData("EngageClimb", new EngageClimb());
        SmartDashboard.putData("SetIntakeAngle: Retract", new SetIntakeAngle(0));
        SmartDashboard.putData("SetIntakeAngle: Intake", new SetIntakeAngle(-110));
        SmartDashboard.putData("SetIntakeAngle: Ground", new SetIntakeAngle(-125));
        SmartDashboard.putData("IntakeBallLowShooter", new IntakeBallLowShooter());
        SmartDashboard.putData("StopIntakeLowerShooter", new StopIntakeLowerShooter());
        SmartDashboard.putData("DriveToCastle: shoot close", new DriveToCastle(50, 160));
        SmartDashboard.putData("IntakeRollerOn", new IntakeRollerOn());
        SmartDashboard.putData("DeployHook", new DeployHook());
        SmartDashboard.putData("DriveTrainClimbEngage", new DriveTrainClimbEngage());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getcoDriver() {
        return coDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

